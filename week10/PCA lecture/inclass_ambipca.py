# -*- coding: utf-8 -*-
"""Inclass AmbiPCA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WKRipD8qpYYv_q0SVYre3dyNF59A9txX
"""

"""
Created on Wed Sep 21 19:14:12 2022
@author: Dr Ambi,
"""

from sklearn.datasets import fetch_openml
import pickle
import pandas as pd
import numpy as np
from sklearn.decomposition import PCA

#Sklearn Feature selection
#https://scikit-learn.org/stable/modules/classes.html#module-sklearn.feature_selection
#https://scikit-learn.org/stable/modules/feature_selection.html#feature-selection

#https://scikit-learn.org/stable/modules/generated/sklearn.feature_selection.VarianceThreshold.html#sklearn.feature_selection.VarianceThreshold

digitsDataFirst100=pickle.load(open( "digitsDataFirst100.p", "rb" ) )
targetFirst100=pickle.load(open( "targetFirst100.p", "rb" ) )

digitsData=digitsDataFirst100
target=targetFirst100
digitsData.head()

desc=digitsData.describe()
print(desc)

desc=digitsData.describe()

print(digitsData.shape)

import matplotlib.pyplot as plt



#Plot first image
i=0
print(digitsData.iloc[i].values.shape)
original_image = digitsData.iloc[i].values.reshape([28,28])
plt.imshow(original_image, cmap='gray_r')
plt.title("original_image: Digit " + target[i], fontsize=15, pad=15)
plt.savefig("original_image image.png")

#No scaling required as all values in same scale
print(digitsData.iloc[1].min())
print(digitsData.iloc[1].max())

numComponents=60
pca = PCA(n_components=numComponents)
mnist_new_features = pca.fit_transform(digitsData)

#print(mnist_new_features.shape)
#print(mnist_new_features)
#print(type(mnist_new_features))
mnist_reduced_recovered_image = pca.inverse_transform(mnist_new_features)

image_reduced = mnist_reduced_recovered_image[i,:].reshape([28,28])
plt.figure(0)
plt.imshow(image_reduced, cmap='gray_r')
plt.title('Compressed image with ' + str(numComponents) +' components', fontsize=15, pad=15)
#plt.savefig("images/reduced_image_with_" + str(numComponents) + "_pca_components.png")
plt.savefig("reduced_image_with_" + str(numComponents) + "_pca_components.png")
np.cumsum(pca.explained_variance_ratio_ * 100)[-1]
cumulativevariance=np.cumsum(pca.explained_variance_ratio_*100)
plt.figure(1)
plt.plot(cumulativevariance)
plt.xlabel('number of components')
plt.ylabel('variance')

df1=pd.DataFrame(mnist_new_features)
df1.head()

desc=df1.describe()
print(desc)

numComponents=40
pca = PCA(n_components=numComponents)
mnist_new_features = pca.fit_transform(digitsData)

#print(mnist_new_features.shape)
#print(mnist_new_features)
#print(type(mnist_new_features))
mnist_reduced_recovered_image = pca.inverse_transform(mnist_new_features)

image_reduced = mnist_reduced_recovered_image[i,:].reshape([28,28])
plt.figure(0)
plt.imshow(image_reduced, cmap='gray_r')
plt.title('Compressed image with ' + str(numComponents) +' components', fontsize=15, pad=15)
#plt.savefig("images/reduced_image_with_" + str(numComponents) + "_pca_components.png")
plt.savefig("reduced_image_with_" + str(numComponents) + "_pca_components.png")
np.cumsum(pca.explained_variance_ratio_ * 100)[-1]
cumulativevariance=np.cumsum(pca.explained_variance_ratio_*100)
plt.figure(1)
plt.plot(cumulativevariance)
plt.xlabel('number of components')
plt.ylabel('variance')

numComponents=50
pca = PCA(n_components=numComponents)
mnist_new_features = pca.fit_transform(digitsData)

#print(mnist_new_features.shape)
#print(mnist_new_features)
#print(type(mnist_new_features))
mnist_reduced_recovered_image = pca.inverse_transform(mnist_new_features)

image_reduced = mnist_reduced_recovered_image[i,:].reshape([28,28])
plt.figure(0)
plt.imshow(image_reduced, cmap='gray_r')
plt.title('Compressed image with ' + str(numComponents) +' components', fontsize=15, pad=15)
#plt.savefig("images/reduced_image_with_" + str(numComponents) + "_pca_components.png")
plt.savefig("reduced_image_with_" + str(numComponents) + "_pca_components.png")
np.cumsum(pca.explained_variance_ratio_ * 100)[-1]
cumulativevariance=np.cumsum(pca.explained_variance_ratio_*100)
plt.figure(1)
plt.plot(cumulativevariance)
plt.xlabel('number of components')
plt.ylabel('variance')

numComponents=80
pca = PCA(n_components=numComponents)
mnist_new_features = pca.fit_transform(digitsData)

#print(mnist_new_features.shape)
#print(mnist_new_features)
#print(type(mnist_new_features))
mnist_reduced_recovered_image = pca.inverse_transform(mnist_new_features)

image_reduced = mnist_reduced_recovered_image[i,:].reshape([28,28])
plt.figure(0)
plt.imshow(image_reduced, cmap='gray_r')
plt.title('Compressed image with ' + str(numComponents) +' components', fontsize=15, pad=15)
#plt.savefig("images/reduced_image_with_" + str(numComponents) + "_pca_components.png")
plt.savefig("reduced_image_with_" + str(numComponents) + "_pca_components.png")
np.cumsum(pca.explained_variance_ratio_ * 100)[-1]
cumulativevariance=np.cumsum(pca.explained_variance_ratio_*100)
plt.figure(1)
plt.plot(cumulativevariance)
plt.xlabel('number of components')
plt.ylabel('variance')